const express = require('express');
const app = express();
//define a port on which it should listen too
const port = 3000;
// generated by ChatGPT
const tasks = [
    {
        id: 1,
        titel: 'Code refactoring',
        beschreibung: 'Überprüfung und Verbesserung des bestehenden Codes',
        erstelldatum: '2023-06-14',
        erfuellungsdatum: null
    },
    {
        id: 2,
        titel: 'Bug fixing',
        beschreibung: 'Behebung von Fehlern im Programm',
        erstelldatum: '2023-06-15',
        erfuellungsdatum: '2023-06-22'
    },
    {
        id: 3,
        titel: 'Feature implementation',
        beschreibung: 'Entwicklung und Implementierung neuer Funktionen',
        erstelldatum: '2023-06-16',
        erfuellungsdatum: null
    }
];
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
//----------------------------------------------//
app.get('/tasks', (request, response) => {
    response.setHeader('Content-Type', 'application/json');
    response.status(200).json(tasks);
});
app.post('/tasks', (request, response) => {
    const newTask = request.body;
    const id = request.body.id;
    tasks.push(newTask);
    response.setHeader('Content-Type', 'application/json');
    response.status(201).json({ task: newTask, id: id });
});
app.get('/tasks/:id', (request, response) => {
    const id = request.params.id;
    const task = tasks.find((task) => task.id == id);
    if (!task) {
        return response.status(404).json({ error: 'Task not found' });
    }
    response.setHeader('Content-Type', 'application/json');
    response.status(200).json(task);
});
app.put('/tasks/:id', (request, response) => {
    const editTask = request.body;
    const id = request.params.id;
    // Find the book with the matching ISBN
    const taskId = tasks.findIndex((task) => task.id == id);

    if (taskId == -1) {
        return response.status(404).json({ error: 'Task not found' });
    }
    tasks.splice(taskId, 1, editTask);
    response.setHeader('Content-Type', 'application/json');
    response.json(editTask);
});
app.delete('/tasks/:id', (request, response) => {
    //const editBook = request.body;
    const id = request.params.id;
    const taskId = tasks.findIndex((task) => task.id == id);
    tasks.splice(taskId, 1)
    response.send('deleted ' + id)
});
//----------------------------------------------//

app.listen(port, () => {
    console.log('Listening on Port: ', port)
});